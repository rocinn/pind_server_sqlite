
@{
    ViewBag.Title = "Pind";
}

<div class="editor border border-light rounded-3 bg-light">
    <div id="input" class="input" contenteditable="true" placeholder="要记些什么呢..." spellcheck="false"></div>
    <div class="tool">
        @*<img class="selectImg" src="/Images/bxs-image.png" onclick="fnSelectImage(this)" />*@
        <div style="flex:1"></div>
        <button type="button" class="btn btn-dark btnSelf" onclick="onSaveClick(this)"><img src="/Images/shandian-48.png" style="height: 25px" /></button>
    </div>
</div>

<div class="moreTool">
    <button class="btn btn-light btnSelf" onclick="fnonlogout()" style="margin-right:5px;"><img src="~/Images/logout.png" style="height: 25px" /></button>
    <button class="btn btn-light btnSelf" onclick="fnonrefresh(this)"><img src="~/Images/refresh.png" style="height: 25px" /></button>
    <div class="d-flex justify-content-center loading" style="margin-left:10px;display:none">
        <div class="spinner-border" role="status" style="height: 25px; width: 25px"></div>
    </div>
    <div style="flex:1"></div>
    <div class="search rounded-2">
        <input id="search" class="rounded-2" placeholder="搜索" type="text" autocomplete="off" />
        <button type="button" class="btn-close" style="margin-right:5px;display:none;"></button>
    </div>
</div>

<div id="empty" style="font-size: -webkit-xxx-large; text-align: center; height: 70px; display: none; margin-top: 100px; color: #bebebe;">╮(╯▽╰)╭</div>


<div id="notelist">
</div>



<script>
    var m_window = window;
    var m_nodeeditor = document.getElementsByClassName('editor')[0];
    var m_nodeinput = document.getElementById('input');
    var m_nodelist = document.getElementById('notelist');
    var m_inputtool_display = "";
    //var toolHeight_input = document.getElementsByClassName('tool')[0].clientHeight;
    var toolHeight_input = 25;

    var m_pinddb;
    var m_requestdb = window.indexedDB.open("pind");
    m_requestdb.onerror = function (event) {
        console.log('数据库打开报错');
    };
    m_requestdb.onsuccess = function (event) {
        m_pinddb = m_requestdb.result;
        console.log('数据库打开成功');
    };
    m_requestdb.onupgradeneeded = function (event) {
        m_pinddb = event.target.result;
        var fileStore;
        if (!m_pinddb.objectStoreNames.contains('files')) {
            fileStore = m_pinddb.createObjectStore('files', { autoIncrement: true });
            fileStore.createIndex('md5', 'md5', { unique: true });
        }
    }
    function addFile(name, md5, base64) {
        var transaction = m_pinddb.transaction(['files'], 'readwrite')
        var objectStore = transaction.objectStore('files')

        var indexmd5 = objectStore.index('files_md5');
        var request1 = indexmd5.get(md5);
        request1.onerror = function (event) {
            console.log('file事务失败');
        };

        request1.onsuccess = function (event) {
            if (request1.result) {
                console.log('已存在file，不写db');
            } else {
                console.log('未获得file');

                var request = objectStore.add({ name, md5, base64, rtime: new Date() });
                request.onsuccess = function (event) {
                    console.log('file写入成功');
                };
                request.onerror = function (event) {
                    console.log('file写入失败');
                }
            }
        };
    }
    function readFile(md5, callback) {
        var transaction = m_pinddb.transaction(['files']);
        var objectStore = transaction.objectStore('files');

        var indexmd5 = objectStore.index('files_md5');
        var request = indexmd5.get(md5);

        request.onerror = function (event) {
            console.log('file事务失败');
        };

        request.onsuccess = function (event) {
            if (request.result) {

            } else {
                console.log('未获得file');
            }

            callback(request.result)
        };
    }

    function fninputfocus() {
        m_nodelist.parentNode.getElementsByClassName("tool")[0].style.display = "flex";
        m_inputtool_display = "flex";
        m_inputtool_display_timeout = "";
        m_nodelist.style.height = m_nodelist.clientHeight - toolHeight_input + "px";
        m_lastNodelistScrollTop = m_nodelist.scrollTop;
        //alert(m_nodelist.style.height + "|" + m_nodelist.clientHeight + "|" + m_nodeeditor.clientHeight + "|" + document.getElementsByTagName("body")[0].clientHeight)

    }
    m_nodeinput.addEventListener('focus', fninputfocus, false);

    let m_inputtool_display_timeout;
    let m_lastNodelistScrollTop = 0;
    m_nodelist.addEventListener('scroll', function (e) {
        //console.log(e.target.scrollTop)
        if (e.target.scrollTop > m_lastNodelistScrollTop) {
            // 上滑
            if (m_inputtool_display == "none")
                return;
            if (m_inputtool_display_timeout)
                return;
            m_nodeinput.blur();
            m_inputtool_display_timeout = setTimeout(function () {
                m_nodelist.parentNode.getElementsByClassName("tool")[0].style.display = "none";
                m_inputtool_display = "none";
                m_nodelist.style.height = m_nodelist.clientHeight + toolHeight_input + "px";
            }, 200);
        }
        m_lastNodelistScrollTop = e.target.scrollTop;
    }, false);

    function fnLoading(isshow) {
        if (isshow) {
            document.getElementsByClassName("loading")[0].style.setProperty('display', 'block', 'important');
        } else {
            document.getElementsByClassName("loading")[0].style.setProperty('display', 'none', 'important');
        }
    }

    function fnonrefresh(e) {
        //alert(m_nodelist.style.height + "|" + m_nodelist.clientHeight + "|" + m_nodeeditor.clientHeight + "|" + document.getElementsByTagName("body")[0].clientHeight)

        fnLoading(true);
        fnGetNotes();
    }

    function fnuploadpindfile(e) {
        let fid = e.getAttribute("data-fid");

        //console.log(e)
        const fileData = e.files[0];
        let read = new FileReader();
        read.readAsDataURL(fileData);
        read.onload = (er) => {

            let md5base64 = md5(read.result)

            function fun(fileid) {
                let nodefilelist = e.parentNode.parentNode.parentNode.getElementsByClassName("filelist")[0];
                nodefilelist.style.setProperty('display', 'block', 'important');

                let nodefileitem = document.createElement("div");
                nodefileitem.setAttribute("class", "text-truncate")

                let nodetext = document.createElement("text");
                nodetext.setAttribute("class", "fileitem")
                nodetext.setAttribute("data-noteid", fid)
                nodetext.setAttribute("data-fileid", fileid)
                nodetext.setAttribute("data-md5", md5base64)
                nodetext.setAttribute("onclick", 'fnclickFile(this)')
                nodetext.innerText = fileData.name

                nodefileitem.appendChild(nodetext);
                nodefilelist.appendChild(nodefileitem);

                addFile(fileData.name, md5base64, read.result);
            }

            request("/note/upfilecheck", "post", {
                noteid: fid,
                name: fileData.name,
                type: fileData.type,
                size: fileData.size,
                md5base64: md5base64
            }, true).then(res1 => {
                if (res1.code == 1) {
                    if (res1.data.id > 0) {
                        fun(res1.data.id)
                        showToast("上传成功✅");
                    } else {
                        request("/note/upfile", "post", {
                            noteid: fid,
                            name: fileData.name,
                            type: fileData.type,
                            size: fileData.size,
                            base64: read.result
                        }, true).then(res => {
                            if (res.code == 1 && res.data.id > 0) {
                                fun(res.data.id)
                                showToast("上传成功✅");
                            } else {
                                showToast(res.data.message || "上传失败❌");
                            }

                        }).catch(res => {
                            showToast("上传文件出现错误");
                        })
                    }

                } else {
                    showToast(res.data.message || "上传失败❌");
                }
            }).catch(res => {
                showToast("上传文件出现错误");
            })


        }
    }

    async function fnSelectImage(e) {
        e.parentNode.getElementsByClassName("filepindupload")[0].click();
    }

    function request(url, method, data, isshowloading = false, loadingtime = 0) {
        let that = this;
        return new Promise(function (resolve, reject) {
            that.fnLoading(isshowloading);
            let d1 = new Date();
            method = method.toLowerCase();
            if (method == "get") {
                let getParas = "";
                for (var i = 0; i < data.length; i++) {
                    getParas += ("&" + data[i].text + "=" + data[i].value);
                }
                if (getParas) {
                    url += ("?" + getParas.substring(1, getParas.length - 1));
                }
            } else if (method != "post") {
                reject({ code: -1, message: "不支持的请求" })
            }
            $.ajax({
                type: method,
                url: url,
                data: data,
                success: function (res) {
                    resolve(res);
                },
                error: function (res) {
                    that.showToast(res.statusText, true);
                    reject(res)
                },
                complete: function () {
                    if (isshowloading) {
                        let d2 = new Date();
                        let cost = parseInt(d2 - d1)
                        if (cost < loadingtime) {
                            setTimeout(function () {
                                that.fnLoading(false);
                            }, loadingtime - cost);
                        } else {
                            that.fnLoading(false);
                        }
                    }
                }
            });
        });
    }

    function fnonlogout() {
        request("/user/logout", "post", {}, true).then(res => {
            location.reload();
        }).catch(res => {
        })
    }

    var winHeight = 0;
    function findDimensions() { //函数：获取尺寸
        //获取窗口高度
        if (window.innerHeight) {
            winHeight = window.innerHeight;
        }
        else if ((document.body) && (document.body.clientHeight)) {
            winHeight = document.body.clientHeight;
        }

        //通过深入Document内部对body进行检测，获取窗口大小
        if (document.documentElement && document.documentElement.clientHeight && document.documentElement.clientWidth) {
            winHeight = document.documentElement.clientHeight;
        }

        var editorH = document.getElementsByClassName("editor")[0].offsetHeight;
        var moreTollH = document.getElementsByClassName("moreTool")[0].offsetHeight;
        var h = winHeight - 15 - editorH - moreTollH - 10 - 10;
        $("#notelist").css("height", h);
    }

    setTimeout(function () {
        findDimensions();
    }, 500);

    window.onresize = findDimensions;

    function pasteDeal(e) {
        e.preventDefault();
        var text;
        var clp = (e.originalEvent || e).clipboardData;
        if (clp === undefined || clp === null) {
            text = window.clipboardData.getData("text") || "";
            if (text !== "") {
                if (window.getSelection) {
                    var newNode = document.createElement("span");
                    newNode.innerHTML = text;
                    window.getSelection().getRangeAt(0).insertNode(newNode);
                } else {
                    document.selection.createRange().pasteHTML(text);
                }
            }
        } else {
            text = clp.getData('text/plain') || "";
            if (text !== "") {
                document.execCommand('insertText', false, text);
            }
        }
    }

    function bindPaste(node) {
        $(node).on("paste", function (e) {
            pasteDeal(e)
        });
    }
    bindPaste(m_nodeinput);

    let m_cha_height = 0
    function onSaveClick(e) {
        let that = this;
        let fid = e.getAttribute("data-fid");

        if (fid) {
            let uTime = e.getAttribute("data-uTime");
            let nodeReEdit = e.parentNode.parentNode;
            let nodeNote = nodeReEdit.parentNode;
            let nodeContentP = nodeNote.getElementsByClassName("contentP")[0];
            let nodeOrInput = nodeContentP.getElementsByClassName("content")[0];
            let nodeReInput = nodeReEdit.getElementsByClassName("input")[0];
            if (nodeOrInput.innerHTML == nodeReInput.innerHTML) {
                nodeReEdit.style.display = "none";
                nodeContentP.style.display = "block";
                return;
            }

            if (!nodeReInput.innerText) {
                showToast('未填写内容');
                return;
            }
            e.setAttribute("disabled", true);
            request("/note/upd", "post", {
                fid: fid,
                htmlcontent: nodeReInput.innerHTML,
                content: nodeReInput.innerText,
                uTime: uTime
            }, true).then(res => {
                if (res && res.code == 1) {
                    nodeReEdit.style.display = "none";
                    nodeContentP.style.display = "block";
                    nodeOrInput.innerHTML = nodeReInput.innerHTML;
                    nodeNote.setAttribute("data-originContent", nodeReInput.innerText);
                    nodeNote.setAttribute("data-originHtmlContent", nodeReInput.innerHTML);
                    nodeNote.setAttribute("data-uTime", res.data.arrNote[0].uTimeShow);
                    e.setAttribute("data-uTime", res.data.arrNote[0].uTimeShow);
                } else {
                    that.showToast((res ? res.message : "") || '操作失败');
                }
            }).catch(res => {

            }).finally(fin => {
                e.removeAttribute("disabled");
            })
        } else {
            let _htmlcontent = m_nodeinput.innerHTML;
            let _content = m_nodeinput.innerText;
            if (!_content) {
                showToast('未填写内容');
                return;
            }
            e.setAttribute("disabled", true);
            request("/note/add", "post", {
                guid: guid(),
                htmlcontent: _htmlcontent,
                content: _content
            }, true).then(res => {
                if (res && res.code == 1) {
                    m_cha_height = m_nodeinput.clientHeight - 45
                    m_nodeinput.innerHTML = "";
                    that.fnInsertNote(res.data.arrNote[0], true);
                    m_nodelist.style.height = m_nodelist.clientHeight + m_cha_height + "px"

                    //alert(m_nodelist.style.height + "|" + m_nodelist.clientHeight + "|" + m_nodeeditor.clientHeight + "|" + document.getElementsByTagName("body")[0].clientHeight)
                    document.getElementById("empty").style.display = "none";
                } else {
                    that.showToast((res ? res.message : "") || '操作失败');
                }
            }).catch(res => {

            }).finally(fin => {
                e.removeAttribute("disabled");
            })
        }
    }

    function guid() {
        function S4() {
            return (((1 + Math.random()) * 0x10000) | 0).toString(16).substring(1);
        }
        return (S4() + S4() + "-" + S4() + "-" + S4() + "-" + S4() + "-" + S4() + S4() + S4());
    }

    function fnGetNotes() {
        let that = this;
        request("/note/get", "get", {}, true, 800).then(res => {
            if (res && res.code == 1) {
                m_nodelist.innerHTML = "";
                for (var i in res.data.arrNote) {
                    let note = res.data.arrNote[i];
                    that.fnInsertNote(note);
                }

                document.getElementById("empty").style.display = res.data.arrNote.length == 0 ? "block" : "none";
            } else {
                that.showToast(res.message || '操作失败');
            }
        }).catch(res => {

        });
    }

    function fnInsertNote(note, isfirst = false) {
        let div = document.createElement("div");
        div.setAttribute("class", "note border rounded-3");
        div.setAttribute("data-originContent", note["content"]);
        div.setAttribute("data-originHtmlContent", note["htmlcontent"]);
        div.setAttribute("data-fid", note["fid"]);
        div.setAttribute("data-uTime", note["uTimeShow"]);

        let str = "<div class='contentP'><div class='oprator'>" +
            "<div class='noteTime text-secondary'>" + note["iTimeShow"] + "</div>" +
            "<div style='flex:1'></div>" +
            "<button class='file btn btn-light btnSelf' data-fid='" + note["fid"] + "' onclick='fnSelectImage(this)' style='margin-right:5px;'><img src='/Images/file.png' style='height: 25px;' /></button>" +
            "<input style='display: none' type='file' class='filepindupload' data-fid='" + note["fid"] + "' onchange='fnuploadpindfile(this)'/>" +
            "<button class='delete btn btn-light btnSelf' onclick='fndeleteClick(this)' style='margin-right:5px;'><img src='/Images/delete.png' style='height: 25px;' /></button>" +
            "<button class='toedit btn btn-light btnSelf' onclick='fntoEditClick(this)'><img src='/Images/edit.png' style='height: 25px' /></button>" +
            "</div>";
        str += ("<div class='content'>" + (note["htmlcontent"] || note["content"]) + "</div></div>");

        str += "<div class='reEdit' style='display:none'>" +

            "<div class='tool'>" +
            "<div style='flex:1'></div>" +
            "<button class='btn btn-light btnSelf' style='margin-right:5px;' onclick='fnCancelClick(this)'><img src='/Images/cancel.png' style='height: 25px' /></botton>" +
            "<button type='button' class='btn btn-dark btnSelf' data-fid='" + note["fid"] + "' data-uTime='" + note["uTimeShow"] + "'' onclick='onSaveClick(this)'><img src='/Images/shandian-48.png' style='height: 25px' /></button>" +
            "</div>" +

            "<div class='input reinput' contenteditable='true' spellcheck='false'>" + (note["htmlcontent"] || note["content"]) + "</div>" +

            "</div>"

        let filelist = "<div class='filelist'" + ((!note["files"] || note["files"].length == 0) ? " style='display:none' " : "") + ">";

        if (note["files"]) {
            for (var i = 0; i < note["files"].length; i++) {
                filelist += "<div class='text-truncate'><text class='fileitem' data-noteid='" + note["fid"] + "' data-fileid='" + note["files"][i].fid + "' data-md5='" + note["files"][i].md5 + "' onclick='fnclickFile(this)'>" + note["files"][i].name + "</text></div>";
            }
        }

        filelist += "</div>";

        str += filelist

        div.innerHTML = str;

        if (isfirst) {
            if (m_nodelist.children.length > 0) {
                m_nodelist.insertBefore(div, m_nodelist.children[0])
            } else {
                m_nodelist.appendChild(div);
            }
        } else {
            m_nodelist.appendChild(div);
        }

        bindPaste(div.getElementsByClassName("reEdit")[0].getElementsByClassName("input")[0]);
    }
    fnGetNotes();

    function fnclickFile(e) {
        let noteid = e.getAttribute("data-noteid");
        let fileid = e.getAttribute("data-fileid");
        let md5file = e.getAttribute("data-md5");

        e.style.color = "#bc4048"
        setTimeout(function () {
            e.style.color = "black"
        }, 1000)

        function downloadFile() {

            readFile(md5file, function (e) {
                if (e) {
                    console.log("走了本地存储")
                    const a = document.createElement("a");
                    a.style.dispaly = 'none';
                    a.href = e.base64;
                    a.download = e.name;
                    document.body.appendChild(a);
                    a.click();
                    document.body.removeChild(a);
                } else {
                    request("/note/dlfile", "get", {
                        noteid: noteid,
                        fileid: fileid
                    }, true).then(res => {
                        if (m_pinddb) {
                            addFile(res.data.name, md5(res.data.base64), res.data.base64);
                        }

                        const a = document.createElement("a");
                        a.style.dispaly = 'none';
                        a.href = res.data.base64;
                        a.download = res.data.name;
                        document.body.appendChild(a);
                        a.click();
                        document.body.removeChild(a);
                    }).catch(res => {

                    })
                }
            })
        }

        function deleteFile() {
            function deleteF(event) {
                request("/note/delFile?noteid=" + noteid + "&fileid=" + fileid, "post", {}, true).then(res => {
                    if (res.code == 1) {
                        e.parentNode.removeChild(e);
                    } else {
                        that.showToast(res.message || '操作失败');
                    }
                }).catch(res => {

                })
            }
            showModelYesNo("确认删除文件？", deleteF);
        }

        showModelFile(e.innerText, downloadFile, deleteFile)
    }


    function fndeleteClick(e) {
        let nodeContentP = e.parentNode.parentNode;
        let nodeNote = nodeContentP.parentNode;
        let fid = nodeNote.getAttribute("data-fid");

        function deleteNote(event) {
            request("/note/del", "post", { fid: fid }, true).then(res => {
                if (res.code == 1) {
                    nodeNote.parentNode.removeChild(nodeNote);
                } else {
                    that.showToast(res.message || '操作失败');
                }
            }).catch(res => {

            })
        }
        showModelYesNo("确认删除笔记？", deleteNote);
    }

    function fntoEditClick(e) {
        let nodeContentP = e.parentNode.parentNode;

        let nodeNote = nodeContentP.parentNode;
        let originContent = nodeNote.getAttribute("data-originContent");
        let originHtmlContent = nodeNote.getAttribute("data-originHtmlContent");
        let fid = nodeNote.getAttribute("data-fid");
        let uTime = nodeNote.getAttribute("data-uTime");

        let nodeReEdit = nodeNote.getElementsByClassName("reEdit")[0];
        //if (nodeReEdit) {
        nodeReEdit.style.display = "block";
        nodeReEdit.getElementsByClassName("input")[0].innerHTML = (originHtmlContent || originContent);
        //} else {
        //    let div = document.createElement("div");
        //    div.setAttribute("class", "reEdit");
        //    div.innerHTML = "<div class='input' contenteditable='true' spellcheck='false'>" + (originHtmlContent || originContent) + "</div><div class='tool'><img class='selectImg' data-fid='" + fid + "' src='/Images/bxs-image.png' onclick='fnSelectImage(this)'/><div style='flex:1'></div><button class='btn btn-light btnSelf' style='margin-right:5px;' onclick='fnCancelClick(this)'><img src='/Images/cancel.png' style='height: 25px' /></botton><button type='button' class='btn btn-dark btnSelf' data-fid='" + fid + "' data-uTime='" + uTime + "'' onclick='onSaveClick(this)'><img src='/Images/shandian-48.png' style='height: 25px' /></button></div>";
        //    nodeNote.appendChild(div);
        //    bindPaste(div.getElementsByClassName("input")[0]);
        //}

        nodeContentP.style.display = "none";
    }

    function fnCancelClick(e) {
        e.parentNode.parentNode.style.display = "none";
        e.parentNode.parentNode.parentNode.getElementsByClassName("contentP")[0].style.display = "block";
    }

    function showModel(msg) {
        let nodeModel = document.getElementById("exampleModalSm");
        var modalBodyInput = nodeModel.querySelector('.modal-body')
        modalBodyInput.innerText = msg || '操作失败';

        var _myModal = new bootstrap.Modal(nodeModel);
        _myModal.show();
    }

    function showModelYesNo(msg, funYes) {
        let nodeModel = document.getElementById("exampleModalDeleteNote");
        var modalBodyInput = nodeModel.querySelector('.modal-body')
        modalBodyInput.innerText = msg;

        function _clickYes(event) {
            _myModal.hide();
            funYes(event);
        }

        var _myModal = new bootstrap.Modal(nodeModel);
        nodeModel.addEventListener('hidden.bs.modal', function (event) {
            node.removeEventListener('click', _clickYes);
        })

        let node = document.getElementsByClassName("modal_ok")[0];
        node.addEventListener('click', _clickYes)
        _myModal.show();
    }

    function showModelFile(msg, funDownload, funDelete) {
        let nodeModel = document.getElementById("exampleModalFile");
        var modalBodyInput = nodeModel.querySelector('.modal-body')
        modalBodyInput.innerText = msg;

        function _clickDownload(event) {
            _myModal.hide();
            funDownload(event);
        }


        function _clickDelete(event) {
            _myModal.hide();
            funDelete(event);
        }

        let nodeDownload = document.getElementsByClassName("modal_Download")[0];
        let nodeDelete = document.getElementsByClassName("modal_Delete")[0];

        var _myModal = new bootstrap.Modal(nodeModel);
        nodeModel.addEventListener('hidden.bs.modal', function (event) {
            nodeDownload.removeEventListener('click', _clickDownload);
            nodeDelete.removeEventListener('click', _clickDelete);
        })


        nodeDownload.addEventListener('click', _clickDownload)
        nodeDelete.addEventListener('click', _clickDelete)

        _myModal.show();
    }

    function showToast(msg, isError = false) {
        let ndoeToastsP = document.getElementById("toastsP");
        let node = document.createElement("div");
        node.setAttribute("class", "toast");
        node.setAttribute("role", "alert");
        node.setAttribute("aria-live", "assertive");
        node.setAttribute("aria-atomic", true);
        if (ndoeToastsP.children.length > 0) {
            node.style.setProperty("top", ndoeToastsP.children[ndoeToastsP.children.length - 1].offsetTop + 47 + 5 + "px");
        } else {
            node.style.setProperty("top", "0px");
        }
        node.style.setProperty("position", "absolute");
        node.style.setProperty("z-index", "999");
        node.style.setProperty("background-color", "white");
        node.style.setProperty("display", "flex");
        node.style.setProperty("align-items", "center");
        if (isError) {
            node.style.setProperty("color", "red");
        }

        node.innerHTML = "<div class='toast-body'>Hello, world! This is a toast message.</div><button type='button' class='btn-close ms-auto me-2' data-bs-dismiss='toast' aria-label='Close'></button>";
        node.getElementsByClassName("toast-body")[0].innerText = msg;
        ndoeToastsP.appendChild(node);
        node.addEventListener('hidden.bs.toast', function () {
            node.parentNode.removeChild(node);
        })

        new bootstrap.Toast(node, { delay: 2500 }).show();
    }

    var m_markins = new Mark(m_nodelist)
    var m_nodesearch = document.getElementById("search");
    var isInputZh = false;
    var inputDelay = [];
    m_nodesearch.addEventListener('compositionstart', function (e) {
        isInputZh = true;
    }, false);

    m_nodesearch.addEventListener('compositionend', function (e) {
        isInputZh = false;
        //console.log("compositionend", e.data);
        filter(m_nodesearch.value);
    }, false);

    m_nodesearch.addEventListener('input', function (e) {
        if (isInputZh) return;
        let st = e.currentTarget.value
        //console.log("input", st);
        filter(st);
    }, false);

    let m_close = m_nodesearch.parentNode.getElementsByClassName("btn-close")[0];
    m_close.addEventListener('click', function (e) {
        m_nodesearch.value = "";
        m_close.style.display = "none";
        filter("");
    }, false);

    function filter(input) {
        let _st = input.toString().trim();
        m_close.style.display = _st ? "block" : "none";
        var delay = setTimeout(function () {
            m_markins.unmark();
            request("/note/search", "get", { stext: _st }, true).then(res => {
                m_nodelist.innerHTML = "";
                for (var i in res.data.arrNote) {
                    let note = res.data.arrNote[i];
                    fnInsertNote(note);
                }

                document.getElementById("empty").style.display = res.data.arrNote.length == 0 ? "block" : "none";
                if (input) {
                    m_markins.mark(input);
                }
            }).catch(res => { });

        }, 500);
        for (var i = 0; i < inputDelay.length; i++) {
            clearTimeout(inputDelay[i])
        }

        inputDelay = [];
        inputDelay.push(delay);
    }


</script>

<style>
    mark {
        background-color: white;
        color: black;
        /*border-radius: 3px;*/
        padding: 0px;
        /*margin-right: 3px;*/
        /*text-decoration: underline;*/
        border-bottom: 5px solid #4dc9cb;
    }

    .lock {
        display: flex;
        align-items: center;
        justify-content: center;
        position: absolute;
        height: 830px;
        width: 100%;
        z-index: 1000;
        background-color: lightgray;
        z-index: 1000;
    }

    .editor {
        padding: 10px 10px 10px 0;
    }

    .input {
        min-height: 45px;
        max-height: 250px;
        overflow-y: auto;
        padding-left: 10px;
        outline: none;
        -webkit-user-modify: read-write;
        line-height: 22px;
    }

        .input::-webkit-scrollbar {
            display: none;
        }

        .input:empty:before {
            content: attr(placeholder);
            color: #848484;
        }

        .input:focus:before {
            color: #bdbdbd;
        }

        .input:focus:after {
            content: none;
        }

    .reinput {
        background-color: #f8f9fa;
        margin-top: 10px;
        padding-top: 10px;
        border-radius: 5px;
        padding-bottom: 10px;
        margin-bottom: 10px;
        margin-left: 10px;
    }

    .moreTool {
        align-items: center;
        display: flex;
        margin-top: 10px;
        /*padding-right: 10px;*/
    }

    .search {
        display: flex;
        align-items: center;
        /* flex-flow: column; */
        background-color: #f8f9fa;
        /* padding-right: 5px; */
        width: 140px;
    }

    #search {
        border: 0;
        background-color: #f8f9fa;
        height: 32px;
        line-height: 32px;
        padding-left: 10px;
        /* padding-right: 10px; */
        outline: none;
        width: 100%;
    }

    .tool {
        align-items: center;
        display: flex;
        position: relative;
        padding-top: 3px;
    }

    .selectImg {
        height: 28px;
        margin-left: 10px;
    }

    .btnSelf {
        padding: 2px 10px;
    }

    #notelist {
        margin-top: 10px;
        overflow-y: auto;
        flex-direction: column;
        display: flex;
    }

        #notelist::-webkit-scrollbar {
            display: none;
        }

    .contentP {
        padding-left: 10px;
    }

    .note {
        padding: 10px 10px 10px 0;
        margin-bottom: 10px;
        white-space: pre-line;
    }

    .oprator {
        display: flex;
        align-items: center;
    }

    .noteTime {
        line-height: 25px;
        height: 25px;
        white-space: nowrap;
    }

    .tags {
        display: flex;
        align-items: center;
        margin-bottom: 5px;
    }

    .tag {
        padding: 2px 5px;
        background-color: #f1f3f4;
        border-radius: 5px;
        margin-right: 5px;
        color: #85888c;
    }

    .content {
        margin-top: 10px;
        overflow-wrap: break-word;
        line-height: 22px;
    }

    .filelist {
        padding-top: 5px;
        text-decoration: underline;
        border-top: 1px #ebebeb solid;
        margin-left: 10px;
        margin-top: 5px;
    }

    .fileitem {
        cursor: pointer;
    }
</style>
